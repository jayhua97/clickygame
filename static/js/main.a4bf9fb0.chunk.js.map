{"version":3,"sources":["components/ClickCard/ClickCard.js","components/Jumbotron/Jumbotron.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["ClickCard","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Jumbotron","message","Nav","href","title","currentScore","highScore","Wrapper","children","App","state","characters","clickedCharacters","handleShuffle","i","length","j","Math","floor","random","_ref","handleHighScoreCheck","_this","includes","setState","push","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Jumbotron_Jumbotron","map","character","components_ClickCard_ClickCard","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a4bf9fb0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ClickCard.css\";\r\n\r\nconst ClickCard = props => (\r\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default ClickCard;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = props => (\r\n    <div className=\"jumbotron text-center\">\r\n        {/* <h1>Clicky Game</h1> */}\r\n        <h1>{props.message}</h1>\r\n    </div>\r\n)\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n\r\n            <li className=\"nav-item\">Current Score: {props.currentScore} | High Score: {props.highScore}</li>\r\n\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n)\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./Wrapper.css\"\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters,\n    currentScore: 0,\n    highScore: 0,\n    clickedCharacters: [],\n    message: \"Click a card to begin!\"\n  };\n\n  // Shuffles array\n  handleShuffle = characters => {\n    for (let i = characters.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [characters[i], characters[j]] = [characters[j], characters[i]]\n    }\n    return characters;\n  }\n\n  // Updates high score if current score is greater\n  handleHighScoreCheck = () => {\n    if (this.state.currentScore >= this.state.highScore) {\n      this.state.highScore = this.state.currentScore\n    } else {\n      this.state.highScore = this.state.highScore\n    }\n    return this.state.highScore\n  }\n\n  handleClick = id => {\n    let clickedCharacters = this.state.clickedCharacters;\n\n    // If you guessed incorrectly game will reset\n    if(clickedCharacters.includes(id)) {\n      this.setState({\n        characters,\n        clickedCharacters: [],\n        currentScore: 0,\n        highScore : this.handleHighScoreCheck(),\n        message: \"You clicked the same card twice! Try again\"\n      })\n      this.handleShuffle(characters);\n    }\n    // If you guessed correctly\n    else {\n      clickedCharacters.push(id)\n      this.setState({\n        characters,\n        currentScore: clickedCharacters.length,\n        message: \"Nice! You guessed correctly!\"\n      })  \n      this.handleShuffle(characters);\n      // If you win\n      if(clickedCharacters.length === 18) {\n        this.setState({\n          characters,\n          currentScore: 0,\n          highScore: 18,\n          clickedCharacters: [],\n          message: \"You Win!\"\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Boku No Hero Clicky Game\"\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron\n          message={this.state.message}\n        />\n        {this.state.characters.map(character => (\n          <ClickCard\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}